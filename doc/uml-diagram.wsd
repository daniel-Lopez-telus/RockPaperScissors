@startuml ClassDiagram





abstract class Players{
    + abstract Shape chooseAShape()
    + abstract String toString()

    
}
class HumanPlayer{

}

class ComputerPlayer{}

class Score{
    - int playersBestScore

    + void updateScoreGame()
    + void showFinalResults()
    + int getPlayersScore()

}
class Rounds{
    - int myRoundNumber
    - int p1Score
    - int p2Score
    - Player player1
    - Player player2

    + Round()
    - void runningRound()
    - void checkWinnerOfTheRound()
    - void updateScoreGame()
    + List<Integer> returnScoreInfo()
}


class Match{
    - ArrayList<Player> players
    - ArrayList<Round> rounds
    - List<Integer> score
    - int numberOfRounds



    + Match()
    - void executeInitialRound()
    - void executeRounds()
    - void checkScore()
    - void announceWinner()
    - void updateRoundNumber()
}

abstract class Shapes{
    # boolean isShapeSelected

    + abstract boolean selectedShape()
    + abstract String toString()
}

class Rock{
    + final boolean BEATSPAPER
    + final boolean BEATSSCISSORS

    + Rock()
}
class Paper{
    + final boolean BEATSROCK
    + final boolean BEATSSCISSORS
    + Paper()
}
class Scissors{
    + final boolean BEATSPAPER
    + final boolean BEATSROCK
    + Scissors()
}

class RpsGame{            
    - Match

    + rpsGame()
    + void executeGame()
    + void exitGame()
    + Match createMatch()
    + ArrayList<Players> createPlayers()
    + String getMessages()
}


RpsGame *-- Match



Shapes <|-- Rock
Shapes <|-- Paper
Shapes <|-- Scissors


Players *-left- Match
Players <|-- HumanPlayer
Players <|-- ComputerPlayer
Players --> Shapes

Score -left-> Players
Rounds --> Score
Rounds --> Shapes
Rounds --> Players
Match *-- Rounds



@enduml